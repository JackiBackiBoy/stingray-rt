#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "includes/bindless.glsl"
#include "includes/ray_payload.glsl"

layout (location = 0) rayPayloadEXT RayPayload rayPayload;

layout (set = BINDLESS_DESCRIPTOR_SET, binding = BINDLESS_TLAS_BINDING) uniform accelerationStructureEXT g_TLAS;

layout (push_constant) uniform constants {
    uint frameIndex;
    uint rtImageIndex;
    uint sceneDescBufferIndex;
} g_PushConstants;

void main() {
    const vec2 pixelCoord = vec2(gl_LaunchIDEXT.xy);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 ndcPos = vec4(d.x, d.y, 1.0, 1.0);
    vec4 worldPos = g_PerFrameData[g_PushConstants.frameIndex].invViewProjection * ndcPos;

    vec3 rayOrigin = g_PerFrameData[g_PushConstants.frameIndex].cameraPosition;
    vec3 rayDir = normalize(worldPos.xyz / worldPos.w - rayOrigin.xyz);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax = 10000.0;

    traceRayEXT(
        g_TLAS,         // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        rayOrigin,      // ray origin
        tMin,           // ray min range
        rayDir,         // ray direction
        tMax,           // ray max range
        0               // payload (location = 0)
  );

  imageStore(g_RWTexturesRGBA8[g_PushConstants.rtImageIndex], ivec2(gl_LaunchIDEXT.x, gl_LaunchSizeEXT.y - 1 - gl_LaunchIDEXT.y), vec4(rayPayload.color, 1.0));
  //imageStore(g_RWTexturesRGBA8[g_PushConstants.rtImageIndex], ivec2(gl_LaunchIDEXT.x, gl_LaunchSizeEXT.y - 1 - gl_LaunchIDEXT.y), vec4(0.0, 1.0, 0.0, 1.0));
}